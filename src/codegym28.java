// ArrayList 和 LinkedList
// 在内部，ArrayList 是作为普通数组实现的。因此，在中间插入元素要求我们首先将所有后续元素移动一个位置，然后将新元素放入空闲插槽。获取和设置元素（get、set）的速度很快，因为这些操作只是处理相关的数组元素。
// LinkedList 具有不同的内部结构。它是作为包含相互关联元素的列表实现的：一组不同的元素，每个元素存储对列表中下一个和上一个元素的引用。要将元素插入此类列表的中间位置，只需更改其未来邻近元素的引用即可。但是，要获取第 130 个元素，必须从 0 到 130 遍历每个对象。换句话说，get 和 set 操作的速度会很慢。
// 可以遵循以下原则：如果经常要在集合中间插入（或删除）元素，最好使用 LinkedList。在所有其他情况下，ArrayList 更适用。

// 可以对集合映射执行哪些操作？
// 集是一组未编号的对象。集的主要特征是它只包含唯一的对象，即，集的每个元素都不相同。下面是可以对集执行的操作：
/*
操作	                    方法
添加元素	            add(), addAll()
删除元素	            remove(), removeAll()
检查元素是否存在	    contains(), containsAll()
 */
// 还可以使用 size() 方法查明集中包含多少元素。

// 映射是由对组成的集合。跟集相似，但它是一组键值对而不是唯一的元素。唯一的限制在于每个 «键» 必须是唯一的。映射不能包含具有相同键的两个对。
// 下面是可以对映射执行的操作：
/*
操作	                    方法
获取所有对的集合	        entrySet()
获取所有键的集合	        keySet()
获取所有值的集合	        values()
添加对	                put(key, value)
获取指定键的值	            get(key)
检查指定键是否存在	        containsKey(key)
检查指定值是否存在	        containsValue(value)
检查映射是否为空	        isEmpty()
清除映射	                clear()
删除指定键的值	            remove(key)
 */


